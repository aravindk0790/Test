image: python:3.11.3

default:
  tags:
    - hcs-eks-runner

include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - project: 'xxxx/xxxxxengineering/pipeline-solutions/gitlab/fragments/push-to-ecr'
    ref: 4.6.1
    file: 'ci-include-push-to-ecr-base.yml'

variables:
  AWS_ACCOUNT: 3xxxxxxx # HCS EKS Dev/Test account
  AWS_ROLE: hcs-eks-deployment
  NAMESPACE: demo
  ENVIRONMENT: dev
  HELM_CHART_VERSION: 0.41.4
  HTTP_PROXY: http://proxy.local.
  HTTPS_PROXY: http://proxy.local.
  http_proxy: http://proxy.local.
  https_proxy: http://proxy.local.dw

stages:
  - credentials
  - quality
  - build
  - test
  - push-image
  - deploy
  - app-test

aws-credentials:
  stage: credentials
  before_script:
    # Install JQ
    - apt-get update -y
    - apt-get install jq -y
    # Install AWS CLI
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
  script:
    # Assume ECR Role
    - ECR_ROLE=$(aws sts assume-role --role-arn arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE} --role-session-name hcs-eks-runner-ecr)
    - echo $ECR_ROLE | jq -r .Credentials.AccessKeyId > AccessKeyId.txt
    - echo $ECR_ROLE | jq -r .Credentials.SecretAccessKey > SecretAccessKey.txt
    - echo $ECR_ROLE | jq -r .Credentials.SessionToken > SessionToken.txt
  artifacts:
    paths:
    - ./AccessKeyId.txt
    - ./SecretAccessKey.txt
    - ./SessionToken.txt
  only:
    - pushes
    - schedule
    - web

kube-score:
  stage: quality
  image:
    name: zegl/kube-score:latest-helm3
    entrypoint: [""]
  before_script:
    # Install AWS CLI
    - apk add --no-cache aws-cli jq
  script:
    # Assume EKS Namespace Role
    - TEMP_ROLE=$(aws sts assume-role --role-arn arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE} --role-session-name hcs-eks-runner-eks)
    - export AWS_ACCESS_KEY_ID=$(echo $TEMP_ROLE | jq -r .Credentials.AccessKeyId)
    - export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_ROLE | jq -r .Credentials.SecretAccessKey)
    - export AWS_SESSION_TOKEN=$(echo $TEMP_ROLE | jq -r .Credentials.SessionToken)
    # Login to ECR
    - export HELM_EXPERIMENTAL_OCI=1
    - aws ecr get-login-password --region eu-west-2 | helm registry login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com
    # Check Helm Chart with Kube-Score
    - helm version
    - helm pull "oci://${AWS_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${ENVIRONMENT}/helm/generic-service" --version $HELM_CHART_VERSION
    - helm template "generic-service-${HELM_CHART_VERSION}.tgz" --values=helm/values/${ENVIRONMENT}-eks-cluster.yaml | kube-score score -

  only:
    - pushes
    - schedule
    - web

docker-build:
  stage: build
  image: docker:20.10.24-dind@sha256:7950b072fd436nnnnnnnnn
  services:
    - name: docker:dind@sha256:2985399fb735fa4c3b6cfba8d1087f011dc4c6f5fde105c9xxxxxxxx
      command: ["--registry-mirror=https://docker-cache.nonprod.dwpcloud.uk:5000"]
  tags:
    - docker-in-docker
  before_script:
    # Install AWS CLI
    - sed -i "s|dl-cdn.alpinelinux.org|nexus.nxxxxxxxx.uk/repository|" /etc/apk/repositories
    # - apk add --no-cache alpine-sdk gcc python3-dev py-pip
  script:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384#note_497228752
    - |
      for i in $(seq 1 30)
      do
          docker info && break
          echo "Waiting for docker to start"
          sleep 1s
      done
    - export no_proxy="$no_proxy,docker"
    - export NO_PROXY="$NO_PROXY,docker"

    # Build Image
    - docker build app/ -t "registry.gitlab.com/dwp/amazon-kubernetes-platform/nginx-demo/$CI_COMMIT_REF_SLUG:${CI_COMMIT_SHORT_SHA}"
      --build-arg HTTP_PROXY=$HTTP_PROXY --build-arg HTTPS_PROXY=$HTTPS_PROXY --build-arg http_proxy=$HTTP_PROXY --build-arg https_proxy=$HTTPS_PROXY 
      --network=host

    # Login to Gitlab CR
    - docker login registry.gitlab.com -u $CI_CONTAINER_REGISTRY_USER -p $CI_CONTAINER_REGISTRY_PASS

    # Push Image to Gitlab CR
    - docker push registry.gitlab.com/dwp/amazon-kubernetes-platform/nginx-demo/$CI_COMMIT_REF_SLUG:${CI_COMMIT_SHORT_SHA}
  only:
    - schedule
    - web

container_scanning:
  stage: test
  variables:
    DOCKER_IMAGE: registry.gitlab.com/dwp/amazon-kubernetes-platform/nginx-demo/$CI_COMMIT_REF_SLUG:${CI_COMMIT_SHORT_SHA}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"

container_scanning_2:
  stage: test
  extends: container_scanning
  variables:
    DOCKER_IMAGE: registry.gitlab.com/dwp/amazon-kubernetes-platform/nginx-demo/$CI_COMMIT_REF_SLUG:${CI_COMMIT_SHORT_SHA}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"

push-to-ecr:
  extends: .push-to-ecr
  stage: push-image
  dependencies:
    - aws-credentials
  before_script:
    - export AWS_ACCESS_KEY_ID=$(cat ./AccessKeyId.txt)
    - export AWS_SECRET_ACCESS_KEY=$(cat ./SecretAccessKey.txt)
    - export AWS_SESSION_TOKEN=$(cat ./SessionToken.txt)
  variables:
    CREATE_REPO: 'false'
    ADD_SSM_PARAM: 'false'
    ECR_IMAGE_LOCATION: ${AWS_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${ENVIRONMENT}/tenant/demo/nginx-demo:${CI_COMMIT_SHORT_SHA}
  only:
    - schedule
    - web

helm-install:
  stage: deploy
  before_script:
    # Install Helm, Unzip and JQ
    - curl https://baltocdn.com/helm/signing.asc | apt-key add -
    - apt-get update -y
    - apt-get install apt-transport-https -y
    - echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
    - apt-get update -y
    - apt-get install helm unzip jq -y
    # Install AWS CLI
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
  script:
    # Assume EKS Namespace Role
    - TEMP_ROLE=$(aws sts assume-role --role-arn arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE} --role-session-name hcs-eks-runner-eks)
    - export AWS_ACCESS_KEY_ID=$(echo $TEMP_ROLE | jq -r .Credentials.AccessKeyId)
    - export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_ROLE | jq -r .Credentials.SecretAccessKey)
    - export AWS_SESSION_TOKEN=$(echo $TEMP_ROLE | jq -r .Credentials.SessionToken)
    # Login to ECR
    - aws ecr get-login-password --region eu-west-2 | helm registry login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com
    # Login to EKS Cluster
    - aws eks update-kubeconfig --region eu-west-2 --name ${ENVIRONMENT}-eks-cluster
    # Install Helm Chart and wait for completion status
    - helm upgrade --install --wait "nginx-demo-gitlab" "oci://${AWS_ACCOUNT}.dkr.ecr.eu-west-2.amazonaws.com/${ENVIRONMENT}/helm/generic-service" --version $HELM_CHART_VERSION --namespace $NAMESPACE 
      --values="helm/values/${ENVIRONMENT}-eks-cluster.yaml"
      --set deployment.image.tag=$CI_COMMIT_SHORT_SHA

  only:
    - schedule
    - web

url-test:
  stage: app-test
  script:
    # Sleep
    # - sleep 60
    # Test URL
    - curl -k https://nginx-demo-gitlab.${ENVIRONMENT}.hcs-eks.xxxxx.uk
    - if [[ $(curl -kL --connect-timeout 5 -s -o /dev/null -w '%{http_code}' https://ngcccc.dwpcloud.uk) == "200" ]]; then
    -   echo "Application is accessible"
    - else
    -   echo "Application is unavailable"
    -   exit 1
    - fi
  only:
    - schedule
    - web
